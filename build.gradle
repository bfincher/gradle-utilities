buildscript {
  repositories {
    if (project.hasProperty('localNexus')) {
      maven {
        url "${localNexus}"
      }
    } else {
      maven {
        mavenCentral()
      }
    }

    dependencies {
      classpath 'com.fincher:gradle-release:0.1.0'
    }
  }
}

apply plugin: 'com.fincher.release'

group = 'com.fincher'

apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

gradlePlugin {
  plugins {
    checkstyle {
      id = "com.fincher.java.checkstyle"
      implementationClass = "com.fincher.gradle.checkstyle.CheckstyleConfigPlugin"
    }
		
    eclipse {
      id = "com.fincher.java.eclipse"
      implementationClass = "com.fincher.gradle.eclipse.EclipseSettings"
     }
     
     gradleBase {
       id = "com.fincher.gradle.base"
       implementationClass = "com.fincher.gradle.base.FincherBasePlugin"
     }
     
     javaBase {
       id = "com.fincher.java"
       implementationClass = "com.fincher.gradle.base.FincherJavaPlugin"
     }
  }
}

dependencies {
  implementation 'com.diffplug.spotless:spotless-plugin-gradle:6.11.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

release {
  if (project.hasProperty('sshKeyFile')) {
    gitRepositorySshPrivateKeyFile = file("${sshKeyFile}")
  }
}
	
sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

repositories {
  mavenLocal()
  if (project.hasProperty('localNexus')) {
    maven {
      url "${localNexus}"
    }
  } else {
    mavenCentral()
  }
}
	
publishing {
  repositories {
    maven {
      if (project.hasProperty("publishUsername") && project.hasProperty("publishPassword")) { 
        credentials {
          username = "${publishUsername}"
          password = "${publishPassword}"
        }
		
        if (project.version.endsWith('-SNAPSHOT')) {
          url "${publishSnapshotUrl}"
        } else {         
          url "${publishReleaseUrl}"
        }

        authentication {
          basic(BasicAuthentication)
        }
      }
    }
  }
}
    
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
    
tasks.register('functionalTest', Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
  dependsOn(tasks.functionalTest)
}

tasks.named('test') {
  useJUnitPlatform()
}
    
eclipse {
  classpath {
    downloadSources=true
    downloadJavadoc=true
  }
}

plugins.withType(EclipsePlugin) {
    plugins.withType(JavaBasePlugin) {
        eclipse {
            classpath {
                file {
                    whenMerged { classpath ->
                        String gradleHome = gradle.getGradleHomeDir()
                            .absolutePath
                            .replace(File.separator, '/')
                        String gradleSourceDirectory = "${gradleHome}/src"
                        classpath.entries.each { entry ->
                            if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary
                                    && entry.library.path.contains('generated-gradle-jars')) {
                                entry.sourcePath =
                                    new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
                                        .fromPath(gradleSourceDirectory)
                            }
                        }
                    }
                }
            }
        }
    }
}
