    buildscript {
        repositories {
            if (project.hasProperty('localNexus')) {
                maven {
                    url "${localNexus}"
                }
            } else {
                maven {
                    mavenCentral()
                }
            }

            dependencies {
                classpath 'com.fincher:gradle-release:0.1.0'
            }
        }
    }

apply plugin: 'com.fincher.release'

allprojects {
    group = 'com.fincher'
}

release {
  if (project.hasProperty('sshKeyFile')) {
    gitRepositorySshPrivateKeyFile = file("${sshKeyFile}")
  }
}

subprojects {
    apply plugin: 'java-gradle-plugin'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'

    java {
    	toolchain {
        	languageVersion = JavaLanguageVersion.of(11)
    	}
	}
	
	sourceSets {
		functionalTest {
			java {
				compileClasspath += main.output
				runtimeClasspath += main.output
			}
		}
	}

    repositories {
        mavenLocal()
        if (project.hasProperty('localNexus')) {
            maven {
                url "${localNexus}"
            }
        } else {
            mavenCentral()
        }
    }
	
    publishing {
        repositories {
            maven {
                if (project.hasProperty("publishUsername") && project.hasProperty("publishPassword")) { 
                    credentials {
                        username = "${publishUsername}"
                        password = "${publishPassword}"
                    }
		
                    if (project.version.endsWith('-SNAPSHOT')) {
                        url "${publishSnapshotUrl}"
                    } else {
                        url "${publishReleaseUrl}"
                    }

                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            }
        }
    }
    
    configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
    
    tasks.register('functionalTest', Test) {
   		testClassesDirs = sourceSets.functionalTest.output.classesDirs
   		classpath = sourceSets.functionalTest.runtimeClasspath
   		useJUnitPlatform()
	}

	gradlePlugin.testSourceSets(sourceSets.functionalTest)

	tasks.named('check') {
   		// Run the functional tests as part of `check`
   		dependsOn(tasks.functionalTest)
	}

	tasks.named('test') {
   		useJUnitPlatform()
	}
    
    eclipse {
    	classpath {
    		downloadSources=true
    		downloadJavadoc=true
    	}
    }
}
