buildscript {    
    dependencies {
        classpath fileTree(includes: ['*.jar'], dir: '../java.checkstyle.plugin/build/libs')
        classpath fileTree(includes: ['*.jar'], dir: '../java.eclipse/build/libs')
    }
}

apply plugin: com.fincher.gradle.checkstyle.CheckstyleConfigPlugin
apply plugin: com.fincher.gradle.eclipse.EclipseSettings

gradlePlugin {
	plugins {
		release {
			id = "fincher.release"
			implementationClass = "com.fincher.gradle.release.ReleasePlugin"
		}
	}
}

sourceSets {
	functionalTest {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}
}
	
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

dependencies {
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.2.0.202206071550-r'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'com.google.guava:guava:31.1-jre'
    functionalTestImplementation 'com.google.guava:guava:31.1-jre'
}

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
   	testClassesDirs = sourceSets.functionalTest.output.classesDirs
   	classpath = sourceSets.functionalTest.runtimeClasspath
   	useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
   	// Run the functional tests as part of `check`
   	dependsOn(tasks.functionalTest)
}

tasks.named('test') {
   	useJUnitPlatform()
}

tasks.checkstyleMain.dependsOn("copyCheckstyleConfig")

checkstyle {
    configDirectory = "${buildDir}/generated/checkstyleConfig" as File
}
