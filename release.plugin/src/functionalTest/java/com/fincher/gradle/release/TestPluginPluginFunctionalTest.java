/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.fincher.gradle.release;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * A simple functional test for the 'testPlugin.greeting' plugin.
 */
class TestPluginPluginFunctionalTest {

	private Path projectDir;

	private Path gitRepoDir;

	private Path buildFile;

	private Path settingsFile;

	private Path gradlePropertiesFile;
	
	private Path versionFile;

	private GradleRunner runner;

	private List<String> runnerArguments;
	
	private String versionKeyValue;

	@BeforeEach
	public void beforeEach() throws Exception {
		projectDir = createProjectDir();
		gitRepoDir = projectDir;
		buildFile = projectDir.resolve("build.gradle");
		settingsFile = projectDir.resolve("settings.gradle");
		gradlePropertiesFile = projectDir.resolve("gradle.properties");
		versionFile = gradlePropertiesFile;
		initGit();

		runnerArguments = new ArrayList<>();
		runnerArguments.add("-s");

		runner = GradleRunner.create();
		runner.forwardOutput();
		runner.withPluginClasspath();
		runner.withProjectDir(projectDir.toFile());
		
		versionKeyValue = "version";

		writeString(settingsFile, "");
		writeString(buildFile, "plugins {" + "  id('fincher.release')" + "}");
		writeString(gradlePropertiesFile, versionKeyValue + " = 0.0.1-SNAPSHOT");			
	}

	@Test
	void testMajorRelease() throws IOException {
		runnerArguments.add("prepareRelease");
		runnerArguments.add("--releaseType");
		runnerArguments.add("MAJOR");

		runner.withArguments(runnerArguments).build();

		verifyPrepareReleaseResults("1.0.0");
	}
	
	@Test
	void testMinorRelease() throws IOException {
		runnerArguments.add("prepareRelease");
		runnerArguments.add("--releaseType");
		runnerArguments.add("MINOR");

		runner.withArguments(runnerArguments).build();

		verifyPrepareReleaseResults("0.1.0");
	}
	
	@Test
	void testPatchRelease() throws IOException {
		runnerArguments.add("prepareRelease");
		runnerArguments.add("--releaseType");
		runnerArguments.add("PATCH");

		runner.withArguments(runnerArguments).build();

		verifyPrepareReleaseResults("0.0.2");
	}

	private void verifyPrepareReleaseResults(String expectedVersion) throws IOException {
		String version = getVersionFromFile();
		assertEquals(expectedVersion, version);
		
	}
	
	private String getVersionFromFile() throws IOException {
		Matcher m =  AbstractReleaseTask.getVersion(versionFile, versionKeyValue);
		return m.group("version");
	}

	private void initGit() throws IOException, GitAPIException {
		Git git = Git.init().setDirectory(gitRepoDir.toFile()).call();
		git.add().addFilepattern("build.gradle").addFilepattern("settings.gradle").call();
		git.commit().setMessage("initial commit").call();
	}

	private void writeString(Path file, String string) throws IOException {
		Files.writeString(file, string);
	}

	private static Path createProjectDir() throws IOException {
		Path projectDir = Paths.get("build", "projectDir");
		if (Files.exists(projectDir)) {
			Files.walk(projectDir).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);
		}

		Files.createDirectories(projectDir);

		return projectDir;
	}

}
